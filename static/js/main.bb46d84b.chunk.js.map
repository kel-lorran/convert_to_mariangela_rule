{"version":3,"sources":["model/Line.js","model/Doc.js","App.js","index.js"],"names":["Line","type","content","this","textContent","attributesToCreateCheckConstrainsNotNull","tableName","_attributesAreKey","tableNameResultMatch","match","constrainType","rawConstrainTypeResultMatch","replace","attributesAreKey","RegExp","trim","value","push","reduce","acc","line","i","length","toUpperCase","resultMatch","includes","map","att","Doc","rawText","lineList","l","toLowerCase","mapOfLine","filter","forEach","createTableLines","constrainNotNullLines","lTarget","getWithoutNotNullText","generateCheckConstrainsNotNull","join","App","useState","contentToConvert","setContentToConvert","contentConverted","setContentConverted","handleSubmit","e","a","preventDefault","doc","convert","error","window","alert","className","onSubmit","onChange","target","placeholder","required","href","ReactDOM","render","document","getElementById"],"mappings":"kRAAqBA,E,WACjB,WAAYC,EAAMC,GAAU,oBACxBC,KAAKF,KAAOA,EACZE,KAAKC,YAAcF,EACnBC,KAAKE,yCAA2C,GAChDF,KAAKG,UAAY,GACjBH,KAAKI,kBAAoB,GAEzB,IAAMC,EAAuBN,EAAQO,MAAM,sBACvCD,IACAL,KAAKG,UAAYE,EAAqB,IAE1CL,KAAKO,cAAgB,GACrB,IAAMC,EAA8BT,EAAQO,MAAM,kCAErC,gBAATR,GAA0BU,IAC1BR,KAAKO,cAAgBC,EAA4B,GAAGC,QAAQ,SAAU,IACtET,KAAKU,iBAAmBV,KAAKC,YAAYK,MAAM,IAAIK,OAAJ,cAAkBX,KAAKO,cAAvB,sBAAyD,GAAGK,Q,kDAInH,WAAyB,OAAOZ,KAAKI,mB,IAErC,SAAqBS,GAAQ,IAAD,EACJ,kBAAVA,EACNb,KAAKI,kBAAkBU,KAAKD,IAE5B,EAAAb,KAAKI,mBAAkBU,KAAvB,oBAA+BD,M,mCAGvC,WAAyB,IAAD,OACpB,GAAiB,iBAAdb,KAAKF,KAAyB,CAG7BE,KAAKC,YAAcD,KAAKC,YAAYK,MAAM,YACrCS,QAAO,SAACC,EAAKC,EAAMC,EAAZ,GAA+B,IAAdC,EAAa,EAAbA,OACrB,OAAQD,GACJ,KAAK,EACD,OAAOD,EAAKG,cAChB,KAAMD,EAAS,EACX,OAAOH,EAAOC,EAClB,QACI,IAAMI,EAAcJ,EAAKX,MAAM,OAG/B,OAFGe,IAAgB,EAAKX,iBAAiBY,SAASD,EAAY,KAC1D,EAAKnB,yCAAyCY,KAAKO,EAAY,IAC5DL,EAAyBC,EAbTR,QAAQ,aAAc,OAetD,IAGX,OAAOT,O,4CAGX,WAAkC,IAAD,OAC7B,OAAOA,KAAKE,yCACPqB,KAAI,SAACC,EAAKN,GAAN,OAAY,IAAIrB,EACjB,cADa,sBAEE,EAAKM,UAFP,4CAGGqB,EAAIf,QAAQ,MAAO,IAHtB,eAGgCS,EAAI,EAHpC,oBAGiDM,EAHjD,2B,KCrDRC,E,WACjB,WAAYC,GAAU,oBAClB1B,KAAK2B,SAAWD,EAAQpB,MAAM,wBACzBiB,KAAI,SAAAK,GAAC,OAAI,IAAI/B,EACV+B,EAAEtB,MAAM,YAAY,GAAGuB,cACvBD,M,2CAIZ,WACI,IAAME,EAAY,GAClB9B,KAAK2B,SAASI,QAAO,SAAAH,GAAC,MAAe,iBAAXA,EAAE9B,QAAyBkC,SAAQ,SAAAJ,GAAC,OAAIE,EAAUF,EAAEzB,WAAayB,KAC3F5B,KAAK2B,SAASI,QAAO,SAAAH,GAAC,MAAe,iBAAXA,EAAE9B,QAAyBkC,SAAQ,YAAsC,IAAnC7B,EAAkC,EAAlCA,UAAWO,EAAuB,EAAvBA,iBACvEoB,EAAU3B,GAAWO,iBAAmBA,KAG5C,IAAMuB,EAAmB,GACnBC,EAAwB,GAO9B,OANAlC,KAAK2B,SAASI,QAAO,SAAAH,GAAC,MAAe,iBAAXA,EAAE9B,QACvBkC,SAAQ,SAAAG,GACLF,EAAiBnB,KAAKqB,EAAQC,yBAC9BF,EAAsBpB,KAAtB,MAAAoB,EAAqB,YAASC,EAAQE,sCAGvC,UAAIJ,EAAJ,YAAyBjC,KAAK2B,SAASI,QAAO,SAAAH,GAAC,MAAe,iBAAXA,EAAE9B,SAA6BoC,GACpFX,KAAI,qBAAEtB,eACNqC,KAAK,Y,oBCaHC,MApCf,WAAgB,IAAD,EACmCC,mBAAS,IAD5C,mBACNC,EADM,KACYC,EADZ,OAEmCF,mBAAS,IAF5C,mBAENG,EAFM,KAEYC,EAFZ,KAMPC,EAAY,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sDACnBD,EAAEE,iBACF,IACQC,EAAM,IAAIxB,EAAIgB,GACpBG,EAAoBK,EAAIC,WACxB,MAAMC,GACNC,OAAOC,MAAM,qGANI,2CAAH,sDAUlB,OACE,sBAAKC,UAAU,MAAf,UACE,yIACA,uBAAMC,SAAUV,EAAcW,SAfb,SAAC,GAAD,IAAY3C,EAAZ,EAAG4C,OAAS5C,MAAZ,OAAwB6B,EAAoB7B,IAe7D,UACE,0BAAU6C,YAAY,uBAAuBC,UAAQ,IAErD,wBAAQ7D,KAAK,SAAb,uBAEE,8BACG6C,OAIP,mBAAGW,UAAU,iBAAiBM,KAAK,2DAAnC,gCC7BNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bb46d84b.chunk.js","sourcesContent":["export default class Line {\r\n    constructor(type, content) {\r\n        this.type = type;\r\n        this.textContent = content;\r\n        this.attributesToCreateCheckConstrainsNotNull = [];\r\n        this.tableName = '';\r\n        this._attributesAreKey = [];\r\n\r\n        const tableNameResultMatch = content.match(/(?<=TABLE\\s)\\w+/gmi);\r\n        if (tableNameResultMatch)\r\n            this.tableName = tableNameResultMatch[0];\r\n\r\n        this.constrainType = '';\r\n        const rawConstrainTypeResultMatch = content.match(/(?<=Constraint\\s).+(?=\\s\\()/gmi)\r\n\r\n        if (type === 'alter table' && rawConstrainTypeResultMatch) {\r\n            this.constrainType = rawConstrainTypeResultMatch[0].replace(/^\\w+\\s/, '');\r\n            this.attributesAreKey = this.textContent.match(new RegExp(`(?<=${this.constrainType}\\\\s\\\\().+(?=\\\\))`))[0].trim();\r\n        }\r\n    }\r\n\r\n    get attributesAreKey() { return this._attributesAreKey }\r\n\r\n    set attributesAreKey(value) {\r\n        if(typeof value === 'string')\r\n            this._attributesAreKey.push(value)\r\n        else\r\n            this._attributesAreKey.push(...value)\r\n    }\r\n\r\n    getWithoutNotNullText() {\r\n        if(this.type === 'create table') {\r\n            const removeNotNullText = text => text.replace(/not null/gi, '');\r\n            // remover NOT NULL da linha do id\r\n            this.textContent = this.textContent.match(/.+\\n|.+/g)\r\n                .reduce((acc, line, i, { length }) => {\r\n                    switch (i) {\r\n                        case 0:\r\n                            return line.toUpperCase();\r\n                        case (length - 1):\r\n                            return acc += line;\r\n                        default:\r\n                            const resultMatch = line.match(/\\w+/)\r\n                            if(resultMatch && !this.attributesAreKey.includes(resultMatch[0]))\r\n                                this.attributesToCreateCheckConstrainsNotNull.push(resultMatch[0]);\r\n                            return acc += removeNotNullText(line);\r\n                    }\r\n                }, '');\r\n        }\r\n        // this.textContent += '\\n\\n';\r\n        return this;\r\n    }\r\n\r\n    generateCheckConstrainsNotNull() {\r\n        return this.attributesToCreateCheckConstrainsNotNull\r\n            .map((att, i) => new Line(\r\n                'alter table',\r\n                `ALTER TABLE ${this.tableName} \r\n            ADD CONSTRAINT ck_${att.replace(/_.+/, '')}_nn_${i + 1} CHECK ( ${att} IS NOT NULL );`\r\n            )\r\n            );\r\n    }\r\n}","import Line from './Line';\r\n\r\nexport default class Doc {\r\n    constructor(rawText) {\r\n        this.lineList = rawText.match(/^.+TABLE[\\w|\\W]+?;/gm)\r\n            .map(l => new Line(\r\n                l.match(/^.+TABLE/)[0].toLowerCase(),\r\n                l\r\n            ));\r\n    }\r\n\r\n    convert() {\r\n        const mapOfLine = {};\r\n        this.lineList.filter(l => l.type === 'create table').forEach(l => mapOfLine[l.tableName] = l);\r\n        this.lineList.filter(l => l.type !== 'create table').forEach(({ tableName, attributesAreKey }) => {\r\n            mapOfLine[tableName].attributesAreKey = attributesAreKey\r\n        });\r\n\r\n        const createTableLines = [];\r\n        const constrainNotNullLines = [];\r\n        this.lineList.filter(l => l.type === 'create table')\r\n            .forEach(lTarget => {\r\n                createTableLines.push(lTarget.getWithoutNotNullText());\r\n                constrainNotNullLines.push(...lTarget.generateCheckConstrainsNotNull())\r\n            })\r\n\r\n        return [...createTableLines, ...this.lineList.filter(l => l.type !== 'create table'), ...constrainNotNullLines]\r\n            .map(({textContent}) => textContent)\r\n            .join('\\n\\n')\r\n    }\r\n}","import React, { useState } from 'react';\nimport Doc from './model/Doc';\nimport Line from './model/Line';\nimport './App.css';\n\nfunction App() {\n  const [contentToConvert, setContentToConvert] = useState('');\n  const [contentConverted, setContentConverted] = useState('');\n\n  const handleChange = ({ target: {value}}) => setContentToConvert(value);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const doc = new Doc(contentToConvert)\n      setContentConverted(doc.convert())\n    } catch(error) {\n      window.alert('Documento inserido não corresponde com a formatação de saída do Data Modeler esperada')\n    }\n  } \n\n  return (\n    <div className=\"App\">\n      <h1>Converta seus arquivos .ddl gerados automaticamente pelo Oracle Data Modeler para o padão Mariangela</h1>\n      <form onSubmit={handleSubmit} onChange={handleChange}>\n        <textarea placeholder=\"cole seu codigo aqui\" required>\n        </textarea>\n        <button type=\"submit\">Converter</button>\n        {/* <textarea> */}\n          <pre>\n            {contentConverted}\n          </pre>\n        {/* </textarea> */}\n      </form>\n      <a className=\"view-in-github\" href=\"https://github.com/kel-lorran/convert_to_mariangela_rule\">\n        View ON GitHub\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}